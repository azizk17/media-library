// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // uses connection pooling
  // directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  // shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

// -------------------------------------------------------------------------------------- //
// Common Types & Enums
// -------------------------------------------------------------------------------------- //
enum Role {
  USER
  ADMIN
  MODERATOR
  ANALYTICS_MANAGER
}

enum AuthMethod {
  PASSWORD
  API_KEY
  OAUTH
}

// -------------------------------------------------------------------------------------- //
// Users
// -------------------------------------------------------------------------------------- //
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String          @id @default(cuid())
  name          String?
  password      String?         @db.Text
  email         String?         @unique
  role          Role            @default(USER)
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  preferences   Json?           @default("{}")
  WatchedMedia  WatchedMedia[]
  FavoriteMedia FavoriteMedia[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// -------------------------------------------------------------------------------------- //
// Tags & Categories
// -------------------------------------------------------------------------------------- //

// model Tag {
//   id          String  @id @default(cuid())
//   name        String  @unique
//   description String?

//   createdAt   DateTime     @default(now())
//   updatedAt   DateTime     @default(now())
// }

// model Category {
//   id          String  @id @default(cuid())
//   name        String  @unique
//   description String?

//   createdAt   DateTime     @default(now())
//   updatedAt   DateTime     @default(now())
// }

// -------------------------------------------------------------------------------------- //
// Media
// -------------------------------------------------------------------------------------- //
enum MediaType {
  CLIP
  MOVIE
  TV_SERIES
  NEWS_REPORT
  DOCUMENTARY
  MUSIC_VIDEO
  LIVE_STREAM
  PODCAST
  AUDIOBOOK
  VIDEO_GAME
  SPORTS_EVENT
  WEBINAR
  INTERVIEW
  SHORT_FILM
  ANIMATION
  EDUCATIONAL
  TRAILER
  TALK_SHOW
  REALITY_SHOW
  GAME_SHOW
  COOKING_SHOW
  TUTORIAL
  VLOG
  MAGAZINE
  NEWS_ARTICLE
  BLOG_POST
  PHOTOGRAPHY
  ARTWORK
}

// -------------------------------------------------------------------------------------- //
// Cast & Crew
// -------------------------------------------------------------------------------------- //
// model MediaCast {
//   name      String
//   character String?
//   order     Int?
//   castId    Int
//   mediaId   String
//   Cast      Cast     @relation(fields: [castId], references: [id])
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@id([castId, mediaId])
// }

// model Cast {
//   id        Int         @id @default(autoincrement())
//   name      String
//   character String?
//   order     Int?
//   mediaId   String
//   createdAt DateTime    @default(now())
//   updatedAt DateTime    @updatedAt
//   MediaCast MediaCast[]
// }

model Transcript {
  id       Int    @id @default(autoincrement())
  language String

  file   File   @relation(fields: [fileId], references: [id])
  fileId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  mediaId   String?
  Media     Media?   @relation(fields: [mediaId], references: [id])
}

// track the media that the user has watched
model WatchedMedia {
  id      String @id @default(cuid())
  userId  String
  mediaId String
  Media   Media  @relation(fields: [mediaId], references: [id])
  User    User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FavoriteMedia {
  id      String @id @default(cuid())
  userId  String
  User    User   @relation(fields: [userId], references: [id])
  mediaId String
  Media   Media  @relation(fields: [mediaId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// -------------------------------------------------------------------------------------- //
// Files
// -------------------------------------------------------------------------------------- //

model File {
  id       String  @id @default(cuid())
  name     String
  url      String?
  type     String?
  width    Int?
  height   Int?
  size     Int?
  duration Int?
  format   String?
  bitrate  Int?

  metadata  Json? // jsonb metadata for the file (e.g. thumbnails )
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  // !! not sure if these two realtions are correct
  Transcript Transcript[]
  Media      Media[]
}

// -------------------------------------------------------------------------------------- //
// 
// -------------------------------------------------------------------------------------- //

// movies 
// tv shows
// podcasts
// music
// audiobooks
// video games
// sports events

model Media {
  id          String  @id @default(cuid())
  name        String
  description String?
  metadata    Json?   @default("{}")

  mediaType       MediaType? // ! not sure about this
  File            File?             @relation(fields: [fileId], references: [id]) // file relation for storing media files like video, audio, images, etc
  fileId          String?
  MediaCollection MediaCollection[]
  FavoriteMedia   FavoriteMedia[]
  WatchedMedia    WatchedMedia[]
  Transcript      Transcript[]
}

// many to many relation between media and collections
model MediaCollection {
  mediaId      String
  collectionId String
  order        Int?
  metadata     Json?

  Media      Media      @relation(fields: [mediaId], references: [id])
  Collection Collection @relation(fields: [collectionId], references: [id])

  @@id([mediaId, collectionId])
}

// collection might be a playlist, a movie collection, a tv show collection, etc
// 
model Collection {
  id          String  @id @default(cuid())
  name        String
  slug        String  @unique
  description String?

  // releaseDate     DateTime?

  // release date for movies, tv shows, etc. helps with sorting and filtering
  releaseDate        DateTime? // good for movies, tv shows, etc 
  type               CollectionType
  metadata           Json? //  e.g. thumbnails, etc 
  MediaCollection    MediaCollection[]
  // realtion to itself for nested collections
  Collection         Collection[]      @relation("NestedCollection")
  NestedCollection   Collection?       @relation("NestedCollection", fields: [nestedCollectionId], references: [id])
  nestedCollectionId String?           @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum CollectionType {
  // can't be nested 
  PLAYLIST
  TV_SHOW
  MUSIC_ALBUM //
  MUSIC
  // can be nested
  CATEGORY
  TAG
  COLLECTION
}

model Source {
  id        String   @id @default(cuid())
  name      String
  url       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
